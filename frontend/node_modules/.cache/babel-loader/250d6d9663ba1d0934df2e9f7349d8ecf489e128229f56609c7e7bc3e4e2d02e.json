{"ast":null,"code":"import { HttpRequest, HttpResponse } from \"@smithy/protocol-http\";\nimport { getSkewCorrectedDate } from \"./utils/getSkewCorrectedDate\";\nimport { getUpdatedSystemClockOffset } from \"./utils/getUpdatedSystemClockOffset\";\nexport const awsAuthMiddleware = options => (next, context) => async function (args) {\n  if (!HttpRequest.isInstance(args.request)) return next(args);\n  let authScheme;\n  let signer;\n  const firstAuthScheme = context.endpointV2?.properties?.authSchemes?.[0];\n  const secondAuthScheme = context.endpointV2?.properties?.authSchemes?.[1];\n  const firstAuthSchemeIsSigv4a = firstAuthScheme?.name === \"sigv4a\";\n  if (firstAuthSchemeIsSigv4a && secondAuthScheme) {\n    signer = await options.signer(authScheme = firstAuthScheme);\n    const uncheckedSigner = signer;\n    const sigv4aAvailable = (() => {\n      if (typeof uncheckedSigner?.getSigv4aSigner === \"function\") {\n        if (uncheckedSigner?.signerOptions?.runtime !== \"node\") {\n          return false;\n        }\n        try {\n          uncheckedSigner.getSigv4aSigner();\n          return true;\n        } catch (e) {}\n      }\n      return false;\n    })();\n    if (!sigv4aAvailable) {\n      signer = await options.signer(authScheme = secondAuthScheme);\n    }\n  } else {\n    signer = await options.signer(authScheme = firstAuthScheme);\n  }\n  let signedRequest;\n  const multiRegionOverride = authScheme?.name === \"sigv4a\" ? authScheme?.signingRegionSet?.join(\",\") : undefined;\n  const signingOptions = {\n    signingDate: getSkewCorrectedDate(options.systemClockOffset),\n    signingRegion: multiRegionOverride || context[\"signing_region\"],\n    signingService: context[\"signing_service\"]\n  };\n  if (context.s3ExpressIdentity) {\n    const sigV4MultiRegion = signer;\n    signedRequest = await sigV4MultiRegion.signWithCredentials(args.request, context.s3ExpressIdentity, signingOptions);\n    if (signedRequest.headers[\"X-Amz-Security-Token\"] || signedRequest.headers[\"x-amz-security-token\"]) {\n      throw new Error(\"X-Amz-Security-Token must not be set for s3-express requests.\");\n    }\n  } else {\n    signedRequest = await signer.sign(args.request, signingOptions);\n  }\n  const output = await next({\n    ...args,\n    request: signedRequest\n  }).catch(error => {\n    const serverTime = error.ServerTime ?? getDateHeader(error.$response);\n    if (serverTime) {\n      options.systemClockOffset = getUpdatedSystemClockOffset(serverTime, options.systemClockOffset);\n    }\n    throw error;\n  });\n  const dateHeader = getDateHeader(output.response);\n  if (dateHeader) {\n    options.systemClockOffset = getUpdatedSystemClockOffset(dateHeader, options.systemClockOffset);\n  }\n  return output;\n};\nconst getDateHeader = response => HttpResponse.isInstance(response) ? response.headers?.date ?? response.headers?.Date : undefined;\nexport const awsAuthMiddlewareOptions = {\n  name: \"awsAuthMiddleware\",\n  tags: [\"SIGNATURE\", \"AWSAUTH\"],\n  relation: \"after\",\n  toMiddleware: \"retryMiddleware\",\n  override: true\n};\nexport const getAwsAuthPlugin = options => ({\n  applyToStack: clientStack => {\n    clientStack.addRelativeTo(awsAuthMiddleware(options), awsAuthMiddlewareOptions);\n  }\n});\nexport const getSigV4AuthPlugin = getAwsAuthPlugin;","map":{"version":3,"names":["HttpRequest","HttpResponse","getSkewCorrectedDate","getUpdatedSystemClockOffset","awsAuthMiddleware","options","next","context","args","isInstance","request","authScheme","signer","firstAuthScheme","endpointV2","properties","authSchemes","secondAuthScheme","firstAuthSchemeIsSigv4a","name","uncheckedSigner","sigv4aAvailable","getSigv4aSigner","signerOptions","runtime","e","signedRequest","multiRegionOverride","signingRegionSet","join","undefined","signingOptions","signingDate","systemClockOffset","signingRegion","signingService","s3ExpressIdentity","sigV4MultiRegion","signWithCredentials","headers","Error","sign","output","catch","error","serverTime","ServerTime","getDateHeader","$response","dateHeader","response","date","Date","awsAuthMiddlewareOptions","tags","relation","toMiddleware","override","getAwsAuthPlugin","applyToStack","clientStack","addRelativeTo","getSigV4AuthPlugin"],"sources":["/Users/shashanktayal/Projects/bigass/frontend/node_modules/@aws-sdk/middleware-signing/dist-es/awsAuthMiddleware.js"],"sourcesContent":["import { HttpRequest, HttpResponse } from \"@smithy/protocol-http\";\nimport { getSkewCorrectedDate } from \"./utils/getSkewCorrectedDate\";\nimport { getUpdatedSystemClockOffset } from \"./utils/getUpdatedSystemClockOffset\";\nexport const awsAuthMiddleware = (options) => (next, context) => async function (args) {\n    if (!HttpRequest.isInstance(args.request))\n        return next(args);\n    let authScheme;\n    let signer;\n    const firstAuthScheme = context.endpointV2?.properties?.authSchemes?.[0];\n    const secondAuthScheme = context.endpointV2?.properties?.authSchemes?.[1];\n    const firstAuthSchemeIsSigv4a = firstAuthScheme?.name === \"sigv4a\";\n    if (firstAuthSchemeIsSigv4a && secondAuthScheme) {\n        signer = await options.signer((authScheme = firstAuthScheme));\n        const uncheckedSigner = signer;\n        const sigv4aAvailable = (() => {\n            if (typeof uncheckedSigner?.getSigv4aSigner === \"function\") {\n                if (uncheckedSigner?.signerOptions?.runtime !== \"node\") {\n                    return false;\n                }\n                try {\n                    uncheckedSigner.getSigv4aSigner();\n                    return true;\n                }\n                catch (e) { }\n            }\n            return false;\n        })();\n        if (!sigv4aAvailable) {\n            signer = await options.signer((authScheme = secondAuthScheme));\n        }\n    }\n    else {\n        signer = await options.signer((authScheme = firstAuthScheme));\n    }\n    let signedRequest;\n    const multiRegionOverride = authScheme?.name === \"sigv4a\" ? authScheme?.signingRegionSet?.join(\",\") : undefined;\n    const signingOptions = {\n        signingDate: getSkewCorrectedDate(options.systemClockOffset),\n        signingRegion: multiRegionOverride || context[\"signing_region\"],\n        signingService: context[\"signing_service\"],\n    };\n    if (context.s3ExpressIdentity) {\n        const sigV4MultiRegion = signer;\n        signedRequest = await sigV4MultiRegion.signWithCredentials(args.request, context.s3ExpressIdentity, signingOptions);\n        if (signedRequest.headers[\"X-Amz-Security-Token\"] || signedRequest.headers[\"x-amz-security-token\"]) {\n            throw new Error(\"X-Amz-Security-Token must not be set for s3-express requests.\");\n        }\n    }\n    else {\n        signedRequest = await signer.sign(args.request, signingOptions);\n    }\n    const output = await next({\n        ...args,\n        request: signedRequest,\n    }).catch((error) => {\n        const serverTime = error.ServerTime ?? getDateHeader(error.$response);\n        if (serverTime) {\n            options.systemClockOffset = getUpdatedSystemClockOffset(serverTime, options.systemClockOffset);\n        }\n        throw error;\n    });\n    const dateHeader = getDateHeader(output.response);\n    if (dateHeader) {\n        options.systemClockOffset = getUpdatedSystemClockOffset(dateHeader, options.systemClockOffset);\n    }\n    return output;\n};\nconst getDateHeader = (response) => HttpResponse.isInstance(response) ? response.headers?.date ?? response.headers?.Date : undefined;\nexport const awsAuthMiddlewareOptions = {\n    name: \"awsAuthMiddleware\",\n    tags: [\"SIGNATURE\", \"AWSAUTH\"],\n    relation: \"after\",\n    toMiddleware: \"retryMiddleware\",\n    override: true,\n};\nexport const getAwsAuthPlugin = (options) => ({\n    applyToStack: (clientStack) => {\n        clientStack.addRelativeTo(awsAuthMiddleware(options), awsAuthMiddlewareOptions);\n    },\n});\nexport const getSigV4AuthPlugin = getAwsAuthPlugin;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}