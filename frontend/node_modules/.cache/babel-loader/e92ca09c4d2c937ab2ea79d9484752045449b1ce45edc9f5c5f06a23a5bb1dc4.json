{"ast":null,"code":"import { HttpRequest } from \"@smithy/protocol-http\";\nimport { getDateHeader, getSkewCorrectedDate, getUpdatedSystemClockOffset } from \"../utils\";\nconst throwSigningPropertyError = (name, property) => {\n  if (!property) {\n    throw new Error(`Property \\`${name}\\` is not resolved for AWS SDK SigV4Auth`);\n  }\n  return property;\n};\nconst validateSigningProperties = async signingProperties => {\n  const context = throwSigningPropertyError(\"context\", signingProperties.context);\n  const config = throwSigningPropertyError(\"config\", signingProperties.config);\n  const authScheme = context.endpointV2?.properties?.authSchemes?.[0];\n  const signerFunction = throwSigningPropertyError(\"signer\", config.signer);\n  const signer = await signerFunction(authScheme);\n  const signingRegion = signingProperties?.signingRegion;\n  const signingName = signingProperties?.signingName;\n  return {\n    config,\n    signer,\n    signingRegion,\n    signingName\n  };\n};\nexport class AwsSdkSigV4Signer {\n  async sign(httpRequest, identity, signingProperties) {\n    if (!HttpRequest.isInstance(httpRequest)) {\n      throw new Error(\"The request is not an instance of `HttpRequest` and cannot be signed\");\n    }\n    const {\n      config,\n      signer,\n      signingRegion,\n      signingName\n    } = await validateSigningProperties(signingProperties);\n    const signedRequest = await signer.sign(httpRequest, {\n      signingDate: getSkewCorrectedDate(config.systemClockOffset),\n      signingRegion: signingRegion,\n      signingService: signingName\n    });\n    return signedRequest;\n  }\n  errorHandler(signingProperties) {\n    return error => {\n      const serverTime = error.ServerTime ?? getDateHeader(error.$response);\n      if (serverTime) {\n        const config = throwSigningPropertyError(\"config\", signingProperties.config);\n        const initialSystemClockOffset = config.systemClockOffset;\n        config.systemClockOffset = getUpdatedSystemClockOffset(serverTime, config.systemClockOffset);\n        const clockSkewCorrected = config.systemClockOffset !== initialSystemClockOffset;\n        if (clockSkewCorrected && error.$metadata) {\n          error.$metadata.clockSkewCorrected = true;\n        }\n      }\n      throw error;\n    };\n  }\n  successHandler(httpResponse, signingProperties) {\n    const dateHeader = getDateHeader(httpResponse);\n    if (dateHeader) {\n      const config = throwSigningPropertyError(\"config\", signingProperties.config);\n      config.systemClockOffset = getUpdatedSystemClockOffset(dateHeader, config.systemClockOffset);\n    }\n  }\n}\nexport const AWSSDKSigV4Signer = AwsSdkSigV4Signer;","map":{"version":3,"names":["HttpRequest","getDateHeader","getSkewCorrectedDate","getUpdatedSystemClockOffset","throwSigningPropertyError","name","property","Error","validateSigningProperties","signingProperties","context","config","authScheme","endpointV2","properties","authSchemes","signerFunction","signer","signingRegion","signingName","AwsSdkSigV4Signer","sign","httpRequest","identity","isInstance","signedRequest","signingDate","systemClockOffset","signingService","errorHandler","error","serverTime","ServerTime","$response","initialSystemClockOffset","clockSkewCorrected","$metadata","successHandler","httpResponse","dateHeader","AWSSDKSigV4Signer"],"sources":["/Users/shashanktayal/Projects/bigass/frontend/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/AwsSdkSigV4Signer.js"],"sourcesContent":["import { HttpRequest } from \"@smithy/protocol-http\";\nimport { getDateHeader, getSkewCorrectedDate, getUpdatedSystemClockOffset } from \"../utils\";\nconst throwSigningPropertyError = (name, property) => {\n    if (!property) {\n        throw new Error(`Property \\`${name}\\` is not resolved for AWS SDK SigV4Auth`);\n    }\n    return property;\n};\nconst validateSigningProperties = async (signingProperties) => {\n    const context = throwSigningPropertyError(\"context\", signingProperties.context);\n    const config = throwSigningPropertyError(\"config\", signingProperties.config);\n    const authScheme = context.endpointV2?.properties?.authSchemes?.[0];\n    const signerFunction = throwSigningPropertyError(\"signer\", config.signer);\n    const signer = await signerFunction(authScheme);\n    const signingRegion = signingProperties?.signingRegion;\n    const signingName = signingProperties?.signingName;\n    return {\n        config,\n        signer,\n        signingRegion,\n        signingName,\n    };\n};\nexport class AwsSdkSigV4Signer {\n    async sign(httpRequest, identity, signingProperties) {\n        if (!HttpRequest.isInstance(httpRequest)) {\n            throw new Error(\"The request is not an instance of `HttpRequest` and cannot be signed\");\n        }\n        const { config, signer, signingRegion, signingName } = await validateSigningProperties(signingProperties);\n        const signedRequest = await signer.sign(httpRequest, {\n            signingDate: getSkewCorrectedDate(config.systemClockOffset),\n            signingRegion: signingRegion,\n            signingService: signingName,\n        });\n        return signedRequest;\n    }\n    errorHandler(signingProperties) {\n        return (error) => {\n            const serverTime = error.ServerTime ?? getDateHeader(error.$response);\n            if (serverTime) {\n                const config = throwSigningPropertyError(\"config\", signingProperties.config);\n                const initialSystemClockOffset = config.systemClockOffset;\n                config.systemClockOffset = getUpdatedSystemClockOffset(serverTime, config.systemClockOffset);\n                const clockSkewCorrected = config.systemClockOffset !== initialSystemClockOffset;\n                if (clockSkewCorrected && error.$metadata) {\n                    error.$metadata.clockSkewCorrected = true;\n                }\n            }\n            throw error;\n        };\n    }\n    successHandler(httpResponse, signingProperties) {\n        const dateHeader = getDateHeader(httpResponse);\n        if (dateHeader) {\n            const config = throwSigningPropertyError(\"config\", signingProperties.config);\n            config.systemClockOffset = getUpdatedSystemClockOffset(dateHeader, config.systemClockOffset);\n        }\n    }\n}\nexport const AWSSDKSigV4Signer = AwsSdkSigV4Signer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}