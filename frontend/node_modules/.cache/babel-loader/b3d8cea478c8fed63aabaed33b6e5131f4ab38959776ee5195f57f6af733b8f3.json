{"ast":null,"code":"const fs = require('fs');\nconst path = require('path');\nconst sdkCode = 'M'; // Constant per SDK\n\nfunction readSdkSemver() {\n  const pkgJsonPath = path.join(__dirname, '../../../package.json');\n  try {\n    const pkgJSONFile = fs.readFileSync(pkgJsonPath, 'utf-8');\n    return JSON.parse(pkgJSONFile).version;\n  } catch (e) {\n    if (e.code === 'ENOENT') {\n      return '0.0.0';\n    }\n    return 'n/a';\n  }\n}\n\n/**\n * @description Gets the relevant versions of the SDK(package version, node version and sdkCode)\n * @param {'default' | 'x.y.z' | 'x.y' | string} useSDKVersion Default uses package.json version\n * @param {'default' | 'x.y.z' | 'x.y' | string} useNodeVersion Default uses process.versions.node\n * @return {{sdkSemver:string, techVersion:string, sdkCode:string}} A map of relevant versions and codes\n */\nfunction getSDKVersions(useSDKVersion = 'default', useNodeVersion = 'default') {\n  // allow to pass a custom SDKVersion\n  const sdkSemver = useSDKVersion === 'default' ? readSdkSemver() : useSDKVersion;\n\n  // allow to pass a custom techVersion (Node version)\n  const techVersion = useNodeVersion === 'default' ? process.versions.node : useNodeVersion;\n  const product = 'A';\n  return {\n    sdkSemver,\n    techVersion,\n    sdkCode,\n    product\n  };\n}\nmodule.exports = getSDKVersions;","map":{"version":3,"names":["fs","require","path","sdkCode","readSdkSemver","pkgJsonPath","join","__dirname","pkgJSONFile","readFileSync","JSON","parse","version","e","code","getSDKVersions","useSDKVersion","useNodeVersion","sdkSemver","techVersion","process","versions","node","product","module","exports"],"sources":["/Users/shashanktayal/Projects/bigass/frontend/node_modules/cloudinary/lib/utils/analytics/getSDKVersions.js"],"sourcesContent":["const fs = require('fs');\nconst path = require('path');\nconst sdkCode = 'M'; // Constant per SDK\n\nfunction readSdkSemver() {\n  const pkgJsonPath = path.join(__dirname, '../../../package.json');\n  try {\n    const pkgJSONFile = fs.readFileSync(pkgJsonPath, 'utf-8');\n    return JSON.parse(pkgJSONFile).version\n  } catch (e) {\n    if (e.code === 'ENOENT') {\n      return '0.0.0'\n    }\n    return 'n/a';\n  }\n}\n\n/**\n * @description Gets the relevant versions of the SDK(package version, node version and sdkCode)\n * @param {'default' | 'x.y.z' | 'x.y' | string} useSDKVersion Default uses package.json version\n * @param {'default' | 'x.y.z' | 'x.y' | string} useNodeVersion Default uses process.versions.node\n * @return {{sdkSemver:string, techVersion:string, sdkCode:string}} A map of relevant versions and codes\n */\nfunction getSDKVersions(useSDKVersion = 'default', useNodeVersion = 'default') {\n  // allow to pass a custom SDKVersion\n  const sdkSemver = useSDKVersion === 'default' ? readSdkSemver() : useSDKVersion;\n\n  // allow to pass a custom techVersion (Node version)\n  const techVersion = useNodeVersion === 'default' ? process.versions.node : useNodeVersion;\n\n  const product = 'A';\n\n  return {\n    sdkSemver,\n    techVersion,\n    sdkCode,\n    product\n  };\n}\n\nmodule.exports = getSDKVersions;\n"],"mappings":"AAAA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAI,CAAC;AACxB,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAME,OAAO,GAAG,GAAG,CAAC,CAAC;;AAErB,SAASC,aAAaA,CAAA,EAAG;EACvB,MAAMC,WAAW,GAAGH,IAAI,CAACI,IAAI,CAACC,SAAS,EAAE,uBAAuB,CAAC;EACjE,IAAI;IACF,MAAMC,WAAW,GAAGR,EAAE,CAACS,YAAY,CAACJ,WAAW,EAAE,OAAO,CAAC;IACzD,OAAOK,IAAI,CAACC,KAAK,CAACH,WAAW,CAAC,CAACI,OAAO;EACxC,CAAC,CAAC,OAAOC,CAAC,EAAE;IACV,IAAIA,CAAC,CAACC,IAAI,KAAK,QAAQ,EAAE;MACvB,OAAO,OAAO;IAChB;IACA,OAAO,KAAK;EACd;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,cAAcA,CAACC,aAAa,GAAG,SAAS,EAAEC,cAAc,GAAG,SAAS,EAAE;EAC7E;EACA,MAAMC,SAAS,GAAGF,aAAa,KAAK,SAAS,GAAGZ,aAAa,CAAC,CAAC,GAAGY,aAAa;;EAE/E;EACA,MAAMG,WAAW,GAAGF,cAAc,KAAK,SAAS,GAAGG,OAAO,CAACC,QAAQ,CAACC,IAAI,GAAGL,cAAc;EAEzF,MAAMM,OAAO,GAAG,GAAG;EAEnB,OAAO;IACLL,SAAS;IACTC,WAAW;IACXhB,OAAO;IACPoB;EACF,CAAC;AACH;AAEAC,MAAM,CAACC,OAAO,GAAGV,cAAc","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}