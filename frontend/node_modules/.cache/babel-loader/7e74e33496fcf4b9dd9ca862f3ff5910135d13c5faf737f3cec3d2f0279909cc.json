{"ast":null,"code":"import { HttpRequest } from \"@smithy/protocol-http\";\nimport { getChecksumAlgorithmForRequest } from \"./getChecksumAlgorithmForRequest\";\nimport { getChecksumLocationName } from \"./getChecksumLocationName\";\nimport { hasHeader } from \"./hasHeader\";\nimport { isStreaming } from \"./isStreaming\";\nimport { selectChecksumAlgorithmFunction } from \"./selectChecksumAlgorithmFunction\";\nimport { stringHasher } from \"./stringHasher\";\nexport const flexibleChecksumsMiddlewareOptions = {\n  name: \"flexibleChecksumsMiddleware\",\n  step: \"build\",\n  tags: [\"BODY_CHECKSUM\"],\n  override: true\n};\nexport const flexibleChecksumsMiddleware = (config, middlewareConfig) => (next, context) => async args => {\n  if (!HttpRequest.isInstance(args.request)) {\n    return next(args);\n  }\n  const {\n    request\n  } = args;\n  const {\n    body: requestBody,\n    headers\n  } = request;\n  const {\n    base64Encoder,\n    streamHasher\n  } = config;\n  const {\n    input,\n    requestChecksumRequired,\n    requestAlgorithmMember\n  } = middlewareConfig;\n  const checksumAlgorithm = getChecksumAlgorithmForRequest(input, {\n    requestChecksumRequired,\n    requestAlgorithmMember\n  }, !!context.isS3ExpressBucket);\n  let updatedBody = requestBody;\n  let updatedHeaders = headers;\n  if (checksumAlgorithm) {\n    const checksumLocationName = getChecksumLocationName(checksumAlgorithm);\n    const checksumAlgorithmFn = selectChecksumAlgorithmFunction(checksumAlgorithm, config);\n    if (isStreaming(requestBody)) {\n      const {\n        getAwsChunkedEncodingStream,\n        bodyLengthChecker\n      } = config;\n      updatedBody = getAwsChunkedEncodingStream(requestBody, {\n        base64Encoder,\n        bodyLengthChecker,\n        checksumLocationName,\n        checksumAlgorithmFn,\n        streamHasher\n      });\n      updatedHeaders = {\n        ...headers,\n        \"content-encoding\": headers[\"content-encoding\"] ? `${headers[\"content-encoding\"]},aws-chunked` : \"aws-chunked\",\n        \"transfer-encoding\": \"chunked\",\n        \"x-amz-decoded-content-length\": headers[\"content-length\"],\n        \"x-amz-content-sha256\": \"STREAMING-UNSIGNED-PAYLOAD-TRAILER\",\n        \"x-amz-trailer\": checksumLocationName\n      };\n      delete updatedHeaders[\"content-length\"];\n    } else if (!hasHeader(checksumLocationName, headers)) {\n      const rawChecksum = await stringHasher(checksumAlgorithmFn, requestBody);\n      updatedHeaders = {\n        ...headers,\n        [checksumLocationName]: base64Encoder(rawChecksum)\n      };\n    }\n  }\n  const result = await next({\n    ...args,\n    request: {\n      ...request,\n      headers: updatedHeaders,\n      body: updatedBody\n    }\n  });\n  return result;\n};","map":{"version":3,"names":["HttpRequest","getChecksumAlgorithmForRequest","getChecksumLocationName","hasHeader","isStreaming","selectChecksumAlgorithmFunction","stringHasher","flexibleChecksumsMiddlewareOptions","name","step","tags","override","flexibleChecksumsMiddleware","config","middlewareConfig","next","context","args","isInstance","request","body","requestBody","headers","base64Encoder","streamHasher","input","requestChecksumRequired","requestAlgorithmMember","checksumAlgorithm","isS3ExpressBucket","updatedBody","updatedHeaders","checksumLocationName","checksumAlgorithmFn","getAwsChunkedEncodingStream","bodyLengthChecker","rawChecksum","result"],"sources":["/Users/shashanktayal/Projects/bigass/frontend/node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/flexibleChecksumsMiddleware.js"],"sourcesContent":["import { HttpRequest } from \"@smithy/protocol-http\";\nimport { getChecksumAlgorithmForRequest } from \"./getChecksumAlgorithmForRequest\";\nimport { getChecksumLocationName } from \"./getChecksumLocationName\";\nimport { hasHeader } from \"./hasHeader\";\nimport { isStreaming } from \"./isStreaming\";\nimport { selectChecksumAlgorithmFunction } from \"./selectChecksumAlgorithmFunction\";\nimport { stringHasher } from \"./stringHasher\";\nexport const flexibleChecksumsMiddlewareOptions = {\n    name: \"flexibleChecksumsMiddleware\",\n    step: \"build\",\n    tags: [\"BODY_CHECKSUM\"],\n    override: true,\n};\nexport const flexibleChecksumsMiddleware = (config, middlewareConfig) => (next, context) => async (args) => {\n    if (!HttpRequest.isInstance(args.request)) {\n        return next(args);\n    }\n    const { request } = args;\n    const { body: requestBody, headers } = request;\n    const { base64Encoder, streamHasher } = config;\n    const { input, requestChecksumRequired, requestAlgorithmMember } = middlewareConfig;\n    const checksumAlgorithm = getChecksumAlgorithmForRequest(input, {\n        requestChecksumRequired,\n        requestAlgorithmMember,\n    }, !!context.isS3ExpressBucket);\n    let updatedBody = requestBody;\n    let updatedHeaders = headers;\n    if (checksumAlgorithm) {\n        const checksumLocationName = getChecksumLocationName(checksumAlgorithm);\n        const checksumAlgorithmFn = selectChecksumAlgorithmFunction(checksumAlgorithm, config);\n        if (isStreaming(requestBody)) {\n            const { getAwsChunkedEncodingStream, bodyLengthChecker } = config;\n            updatedBody = getAwsChunkedEncodingStream(requestBody, {\n                base64Encoder,\n                bodyLengthChecker,\n                checksumLocationName,\n                checksumAlgorithmFn,\n                streamHasher,\n            });\n            updatedHeaders = {\n                ...headers,\n                \"content-encoding\": headers[\"content-encoding\"]\n                    ? `${headers[\"content-encoding\"]},aws-chunked`\n                    : \"aws-chunked\",\n                \"transfer-encoding\": \"chunked\",\n                \"x-amz-decoded-content-length\": headers[\"content-length\"],\n                \"x-amz-content-sha256\": \"STREAMING-UNSIGNED-PAYLOAD-TRAILER\",\n                \"x-amz-trailer\": checksumLocationName,\n            };\n            delete updatedHeaders[\"content-length\"];\n        }\n        else if (!hasHeader(checksumLocationName, headers)) {\n            const rawChecksum = await stringHasher(checksumAlgorithmFn, requestBody);\n            updatedHeaders = {\n                ...headers,\n                [checksumLocationName]: base64Encoder(rawChecksum),\n            };\n        }\n    }\n    const result = await next({\n        ...args,\n        request: {\n            ...request,\n            headers: updatedHeaders,\n            body: updatedBody,\n        },\n    });\n    return result;\n};\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,uBAAuB;AACnD,SAASC,8BAA8B,QAAQ,kCAAkC;AACjF,SAASC,uBAAuB,QAAQ,2BAA2B;AACnE,SAASC,SAAS,QAAQ,aAAa;AACvC,SAASC,WAAW,QAAQ,eAAe;AAC3C,SAASC,+BAA+B,QAAQ,mCAAmC;AACnF,SAASC,YAAY,QAAQ,gBAAgB;AAC7C,OAAO,MAAMC,kCAAkC,GAAG;EAC9CC,IAAI,EAAE,6BAA6B;EACnCC,IAAI,EAAE,OAAO;EACbC,IAAI,EAAE,CAAC,eAAe,CAAC;EACvBC,QAAQ,EAAE;AACd,CAAC;AACD,OAAO,MAAMC,2BAA2B,GAAGA,CAACC,MAAM,EAAEC,gBAAgB,KAAK,CAACC,IAAI,EAAEC,OAAO,KAAK,MAAOC,IAAI,IAAK;EACxG,IAAI,CAACjB,WAAW,CAACkB,UAAU,CAACD,IAAI,CAACE,OAAO,CAAC,EAAE;IACvC,OAAOJ,IAAI,CAACE,IAAI,CAAC;EACrB;EACA,MAAM;IAAEE;EAAQ,CAAC,GAAGF,IAAI;EACxB,MAAM;IAAEG,IAAI,EAAEC,WAAW;IAAEC;EAAQ,CAAC,GAAGH,OAAO;EAC9C,MAAM;IAAEI,aAAa;IAAEC;EAAa,CAAC,GAAGX,MAAM;EAC9C,MAAM;IAAEY,KAAK;IAAEC,uBAAuB;IAAEC;EAAuB,CAAC,GAAGb,gBAAgB;EACnF,MAAMc,iBAAiB,GAAG3B,8BAA8B,CAACwB,KAAK,EAAE;IAC5DC,uBAAuB;IACvBC;EACJ,CAAC,EAAE,CAAC,CAACX,OAAO,CAACa,iBAAiB,CAAC;EAC/B,IAAIC,WAAW,GAAGT,WAAW;EAC7B,IAAIU,cAAc,GAAGT,OAAO;EAC5B,IAAIM,iBAAiB,EAAE;IACnB,MAAMI,oBAAoB,GAAG9B,uBAAuB,CAAC0B,iBAAiB,CAAC;IACvE,MAAMK,mBAAmB,GAAG5B,+BAA+B,CAACuB,iBAAiB,EAAEf,MAAM,CAAC;IACtF,IAAIT,WAAW,CAACiB,WAAW,CAAC,EAAE;MAC1B,MAAM;QAAEa,2BAA2B;QAAEC;MAAkB,CAAC,GAAGtB,MAAM;MACjEiB,WAAW,GAAGI,2BAA2B,CAACb,WAAW,EAAE;QACnDE,aAAa;QACbY,iBAAiB;QACjBH,oBAAoB;QACpBC,mBAAmB;QACnBT;MACJ,CAAC,CAAC;MACFO,cAAc,GAAG;QACb,GAAGT,OAAO;QACV,kBAAkB,EAAEA,OAAO,CAAC,kBAAkB,CAAC,GACxC,GAAEA,OAAO,CAAC,kBAAkB,CAAE,cAAa,GAC5C,aAAa;QACnB,mBAAmB,EAAE,SAAS;QAC9B,8BAA8B,EAAEA,OAAO,CAAC,gBAAgB,CAAC;QACzD,sBAAsB,EAAE,oCAAoC;QAC5D,eAAe,EAAEU;MACrB,CAAC;MACD,OAAOD,cAAc,CAAC,gBAAgB,CAAC;IAC3C,CAAC,MACI,IAAI,CAAC5B,SAAS,CAAC6B,oBAAoB,EAAEV,OAAO,CAAC,EAAE;MAChD,MAAMc,WAAW,GAAG,MAAM9B,YAAY,CAAC2B,mBAAmB,EAAEZ,WAAW,CAAC;MACxEU,cAAc,GAAG;QACb,GAAGT,OAAO;QACV,CAACU,oBAAoB,GAAGT,aAAa,CAACa,WAAW;MACrD,CAAC;IACL;EACJ;EACA,MAAMC,MAAM,GAAG,MAAMtB,IAAI,CAAC;IACtB,GAAGE,IAAI;IACPE,OAAO,EAAE;MACL,GAAGA,OAAO;MACVG,OAAO,EAAES,cAAc;MACvBX,IAAI,EAAEU;IACV;EACJ,CAAC,CAAC;EACF,OAAOO,MAAM;AACjB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}