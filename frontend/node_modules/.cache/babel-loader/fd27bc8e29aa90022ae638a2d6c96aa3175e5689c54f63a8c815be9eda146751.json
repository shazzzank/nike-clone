{"ast":null,"code":"const reverseVersion = require('./reverseVersion');\nconst stringPad = require('./stringPad');\nconst base64Map = require('../encoding/base64Map');\n\n/**\n * @private\n * @description Encodes a semVer-like version string\n * @param {string} semVer Input can be either x.y.z or x.y\n * @return {string} A string built from 3 characters of the base64 table that encode the semVer\n */\nmodule.exports = semVer => {\n  let strResult = '';\n\n  // support x.y or x.y.z by using 'parts' as a variable\n  let parts = semVer.split('.').length;\n  let paddedStringLength = parts * 6; // we pad to either 12 or 18 characters\n\n  // reverse (but don't mirror) the version. 1.5.15 -> 15.5.1\n  // Pad to two spaces, 15.5.1 -> 15.05.01\n  let paddedReversedSemver = reverseVersion(semVer);\n\n  // turn 15.05.01 to a string '150501' then to a number 150501\n  let num = parseInt(paddedReversedSemver.split('.').join(''));\n\n  // Represent as binary, add left padding to 12 or 18 characters.\n  // 150,501 -> 100100101111100101\n\n  let paddedBinary = num.toString(2);\n  paddedBinary = stringPad(paddedBinary, paddedStringLength, '0');\n\n  // Stop in case an invalid version number was provided\n  // paddedBinary must be built from sections of 6 bits\n  if (paddedBinary.length % 6 !== 0) {\n    throw 'Version must be smaller than 43.21.26)';\n  }\n\n  // turn every 6 bits into a character using the base64Map\n  paddedBinary.match(/.{1,6}/g).forEach(bitString => {\n    // console.log(bitString);\n    strResult += base64Map[bitString];\n  });\n  return strResult;\n};","map":{"version":3,"names":["reverseVersion","require","stringPad","base64Map","module","exports","semVer","strResult","parts","split","length","paddedStringLength","paddedReversedSemver","num","parseInt","join","paddedBinary","toString","match","forEach","bitString"],"sources":["/Users/shashanktayal/Projects/bigass/frontend/node_modules/cloudinary/lib/utils/analytics/encodeVersion.js"],"sourcesContent":["const reverseVersion = require('./reverseVersion');\nconst stringPad = require('./stringPad');\nconst base64Map = require('../encoding/base64Map');\n\n/**\n * @private\n * @description Encodes a semVer-like version string\n * @param {string} semVer Input can be either x.y.z or x.y\n * @return {string} A string built from 3 characters of the base64 table that encode the semVer\n */\nmodule.exports = (semVer) => {\n  let strResult = '';\n\n  // support x.y or x.y.z by using 'parts' as a variable\n  let parts = semVer.split('.').length;\n  let paddedStringLength = parts * 6; // we pad to either 12 or 18 characters\n\n  // reverse (but don't mirror) the version. 1.5.15 -> 15.5.1\n  // Pad to two spaces, 15.5.1 -> 15.05.01\n  let paddedReversedSemver = reverseVersion(semVer);\n\n  // turn 15.05.01 to a string '150501' then to a number 150501\n  let num = parseInt(paddedReversedSemver.split('.').join(''));\n\n  // Represent as binary, add left padding to 12 or 18 characters.\n  // 150,501 -> 100100101111100101\n\n  let paddedBinary = num.toString(2);\n  paddedBinary = stringPad(paddedBinary, paddedStringLength, '0');\n\n  // Stop in case an invalid version number was provided\n  // paddedBinary must be built from sections of 6 bits\n  if (paddedBinary.length % 6 !== 0) {\n    throw 'Version must be smaller than 43.21.26)';\n  }\n\n  // turn every 6 bits into a character using the base64Map\n  paddedBinary.match(/.{1,6}/g).forEach((bitString) => {\n    // console.log(bitString);\n    strResult += base64Map[bitString];\n  });\n\n  return strResult;\n};\n"],"mappings":"AAAA,MAAMA,cAAc,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAClD,MAAMC,SAAS,GAAGD,OAAO,CAAC,aAAa,CAAC;AACxC,MAAME,SAAS,GAAGF,OAAO,CAAC,uBAAuB,CAAC;;AAElD;AACA;AACA;AACA;AACA;AACA;AACAG,MAAM,CAACC,OAAO,GAAIC,MAAM,IAAK;EAC3B,IAAIC,SAAS,GAAG,EAAE;;EAElB;EACA,IAAIC,KAAK,GAAGF,MAAM,CAACG,KAAK,CAAC,GAAG,CAAC,CAACC,MAAM;EACpC,IAAIC,kBAAkB,GAAGH,KAAK,GAAG,CAAC,CAAC,CAAC;;EAEpC;EACA;EACA,IAAII,oBAAoB,GAAGZ,cAAc,CAACM,MAAM,CAAC;;EAEjD;EACA,IAAIO,GAAG,GAAGC,QAAQ,CAACF,oBAAoB,CAACH,KAAK,CAAC,GAAG,CAAC,CAACM,IAAI,CAAC,EAAE,CAAC,CAAC;;EAE5D;EACA;;EAEA,IAAIC,YAAY,GAAGH,GAAG,CAACI,QAAQ,CAAC,CAAC,CAAC;EAClCD,YAAY,GAAGd,SAAS,CAACc,YAAY,EAAEL,kBAAkB,EAAE,GAAG,CAAC;;EAE/D;EACA;EACA,IAAIK,YAAY,CAACN,MAAM,GAAG,CAAC,KAAK,CAAC,EAAE;IACjC,MAAM,wCAAwC;EAChD;;EAEA;EACAM,YAAY,CAACE,KAAK,CAAC,SAAS,CAAC,CAACC,OAAO,CAAEC,SAAS,IAAK;IACnD;IACAb,SAAS,IAAIJ,SAAS,CAACiB,SAAS,CAAC;EACnC,CAAC,CAAC;EAEF,OAAOb,SAAS;AAClB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}